# Generated by Django 3.2.14 on 2024-10-27 20:36

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True, verbose_name='criado em')),
                ('updated_at', models.DateTimeField(auto_now=True, null=True, verbose_name='alterado em')),
                ('token', models.CharField(blank=True, editable=False, max_length=30, null=True, verbose_name='Token')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='users_user_created_by_related', related_query_name='users_users_created_by', to=settings.AUTH_USER_MODEL)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='users_user_updated_by_related', related_query_name='users_users_updated_by', to=settings.AUTH_USER_MODEL)),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Usuário',
                'verbose_name_plural': 'Usuários',
                'permissions': (('generate_token', 'Gerar Token de usuário'),),
                'swappable': 'AUTH_USER_MODEL',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='LoggedUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('logged_at', models.DateTimeField(auto_now_add=True, verbose_name='Logado desde')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Usuário')),
            ],
            options={
                'verbose_name': 'Usuário Logado',
                'verbose_name_plural': 'Usuários logados',
            },
        ),
        migrations.CreateModel(
            name='ApiRequests',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('token', models.CharField(blank=True, editable=False, max_length=255, null=True)),
                ('view_data_post', models.TextField(blank=True, editable=False, max_length=5000, null=True, verbose_name='Data Post')),
                ('view_data_get', models.TextField(blank=True, editable=False, max_length=5000, null=True, verbose_name='Data Get')),
                ('view_query_params_get', models.TextField(blank=True, editable=False, max_length=5000, null=True, verbose_name='Url Params')),
                ('view_basename', models.CharField(blank=True, editable=False, max_length=100, null=True)),
                ('view_action', models.CharField(blank=True, editable=False, max_length=100, null=True, verbose_name='Action da view')),
                ('view_pk', models.CharField(blank=True, editable=False, max_length=100, null=True, verbose_name='Chave Primária')),
                ('view_method', models.CharField(blank=True, editable=False, max_length=10, null=True, verbose_name='Verbo Http')),
                ('requested_at', models.DateTimeField(auto_now_add=True, verbose_name='Requisição em')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Usuário')),
            ],
            options={
                'verbose_name': 'Requisição de API',
                'verbose_name_plural': 'Requisições de API',
            },
        ),
        migrations.CreateModel(
            name='AccessHistory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('access_at', models.DateTimeField(verbose_name='Acessou em')),
                ('ip', models.CharField(blank=True, max_length=20, null=True, verbose_name='IP')),
                ('origin', models.CharField(blank=True, choices=[('BACKEND', 'Backend'), ('FRONTEND', 'Frontend')], default='BACKEND', max_length=255, null=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Usuário')),
            ],
            options={
                'verbose_name': 'Histórico de Acesso',
                'verbose_name_plural': 'Históricos de Acesso',
            },
        ),
    ]
